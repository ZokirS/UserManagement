// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserManagement.EF;

namespace UserManagement.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221128123221_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("UserManagement.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastSignInDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SignUpDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1939778d-c3ad-4d7f-9c34-be8fc6c86b10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "73206de9-fb2e-428a-94be-4d449c3c7277",
                            Email = "london_lesc3@gmail.com",
                            EmailConfirmed = false,
                            LastSignInDate = new DateTime(2022, 11, 28, 17, 32, 21, 241, DateTimeKind.Local).AddTicks(5404),
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7b7fa2c7-17ec-42ce-bd0e-5dbb75014692",
                            SignUpDate = new DateTime(2022, 11, 28, 17, 32, 21, 242, DateTimeKind.Local).AddTicks(6285),
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "Genie"
                        },
                        new
                        {
                            Id = "a5292202-0cb2-4abd-8d9b-c871c406d10d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9f9d4ef5-a9ad-4416-a283-4facadab2e59",
                            Email = "haylee.nitzsc@yahoo.com",
                            EmailConfirmed = false,
                            LastSignInDate = new DateTime(2022, 11, 28, 17, 32, 21, 242, DateTimeKind.Local).AddTicks(7108),
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a046ea03-da3a-4046-93a4-bc0ee240c4c9",
                            SignUpDate = new DateTime(2022, 11, 28, 17, 32, 21, 242, DateTimeKind.Local).AddTicks(7113),
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "Anthony"
                        },
                        new
                        {
                            Id = "21d06dad-c583-4bc1-8ffc-d8c2226017d9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "267a0ece-6e6d-4517-8d1b-e43d30572c70",
                            Email = "harvey1982@hotmail.com",
                            EmailConfirmed = false,
                            LastSignInDate = new DateTime(2022, 11, 28, 17, 32, 21, 242, DateTimeKind.Local).AddTicks(7208),
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5928625a-7b85-4a7e-9bf7-3b628b238c05",
                            SignUpDate = new DateTime(2022, 11, 28, 17, 32, 21, 242, DateTimeKind.Local).AddTicks(7209),
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "Kelly"
                        },
                        new
                        {
                            Id = "b82f5249-2132-4d22-bce1-4f9e238c9a76",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4bcd521e-a5f9-4d7a-bf25-897ca9f44060",
                            Email = "daisy_bernha@gmail.com",
                            EmailConfirmed = false,
                            LastSignInDate = new DateTime(2022, 11, 28, 17, 32, 21, 242, DateTimeKind.Local).AddTicks(7218),
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "30656a76-7efc-44a6-951e-ef845d920af7",
                            SignUpDate = new DateTime(2022, 11, 28, 17, 32, 21, 242, DateTimeKind.Local).AddTicks(7219),
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "Paul"
                        },
                        new
                        {
                            Id = "60e896b8-5e63-4163-afb3-c72bd6d37e3b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "03843170-c232-4185-9fce-cae3052e695c",
                            Email = "rosa_turne6@gmail.com",
                            EmailConfirmed = false,
                            LastSignInDate = new DateTime(2022, 11, 28, 17, 32, 21, 242, DateTimeKind.Local).AddTicks(7227),
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ecc58a3-48a5-40ed-a430-68aac7c1603e",
                            SignUpDate = new DateTime(2022, 11, 28, 17, 32, 21, 242, DateTimeKind.Local).AddTicks(7228),
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "Freida"
                        },
                        new
                        {
                            Id = "0b8c8ba2-564e-4939-b824-1031667e1a72",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "30d794e5-5879-4f48-a64d-c814659f6646",
                            Email = "colin_lin6@hotmail.com",
                            EmailConfirmed = false,
                            LastSignInDate = new DateTime(2022, 11, 28, 17, 32, 21, 242, DateTimeKind.Local).AddTicks(7242),
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8cf34973-9f13-497a-9a1c-02f427d83580",
                            SignUpDate = new DateTime(2022, 11, 28, 17, 32, 21, 242, DateTimeKind.Local).AddTicks(7244),
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "Margaret"
                        },
                        new
                        {
                            Id = "9d9fb9d9-5555-4912-8555-e00011ce25b7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5182dfb6-8f2c-4bea-b6a7-9793439cb3d1",
                            Email = "arjun_kertzma@gmail.com",
                            EmailConfirmed = false,
                            LastSignInDate = new DateTime(2022, 11, 28, 17, 32, 21, 242, DateTimeKind.Local).AddTicks(7251),
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fc28bb00-4f23-4d0f-b3a0-7c7259bd16c7",
                            SignUpDate = new DateTime(2022, 11, 28, 17, 32, 21, 242, DateTimeKind.Local).AddTicks(7253),
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "Peter"
                        },
                        new
                        {
                            Id = "cbd5272d-8232-4f11-887b-7638b4ae6fbd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2129aa4-3f3a-42c7-bd94-7ebe56ea1954",
                            Email = "emil2002@hotmail.com",
                            EmailConfirmed = false,
                            LastSignInDate = new DateTime(2022, 11, 28, 17, 32, 21, 242, DateTimeKind.Local).AddTicks(7264),
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "80f4e502-8fe6-4e2c-bc6e-d373154e441b",
                            SignUpDate = new DateTime(2022, 11, 28, 17, 32, 21, 242, DateTimeKind.Local).AddTicks(7265),
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "Deloris"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("UserManagement.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("UserManagement.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserManagement.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("UserManagement.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
